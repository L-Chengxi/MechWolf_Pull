(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{195:function(e,t,n){"use strict";n.r(t);var o=n(0),a=Object(o.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"creating-new-components"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creating-new-components","aria-hidden":"true"}},[e._v("#")]),e._v(" Creating New Components")]),e._v(" "),n("h2",{attrs:{id:"general-approach"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#general-approach","aria-hidden":"true"}},[e._v("#")]),e._v(" General Approach")]),e._v(" "),n("p",[e._v("You may find yourself in the position that MechWolf's included\ncomponents aren't what you need. In that case, you'll have to create\nyour own component. Here's how:")]),e._v(" "),n("ol",[n("li",[n("p",[n("strong",[e._v("Decide what kind of component it is.")]),n("br"),e._v("\nIf you're trying to make a new kind of pump, for example, you'll\nwant to be inheriting from "),n("code",[e._v("~mechwolf.components.pump.Pump")]),e._v(". For\ncomponents being controlled (i.e. not aliases of\n"),n("code",[e._v("~mechwolf.components.component.Component")]),e._v("), you'll have to\ncreate a subclass of\n"),n("code",[e._v("~mechwolf.components.component.ActiveComponent")]),e._v(". If you are\nonly creating an alias of "),n("code",[e._v("~mechwolf.validate_component")]),e._v(", you\ncan skip 4–6.")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Create a new class.")]),n("br"),e._v("\nIf you're struggling, see "),n("a",{attrs:{href:"https://docs.python.org/3/tutorial/classes.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("the official Python\ndocs"),n("OutboundLink")],1),e._v(", a handy\n"),n("a",{attrs:{href:"https://www.tutorialspoint.com/python3/python_classes_objects.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("tutorial on\nclasses"),n("OutboundLink")],1),e._v(",\nor look at MechWolf's source code. Make sure to add "),n("code",[e._v("name")]),e._v(" as an\nargument to "),n("code",[e._v("__init__")]),e._v(" and the line\n"),n("code",[e._v("super().__init__(name=name)")]),e._v(", which tells Python to pass the\nname argument up to the\n"),n("code",[e._v("~mechwolf.components.component.ActiveComponent")]),e._v(" class.")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Give the component its attributes.")]),n("br"),e._v("\nThis means that anything that you will be using as keywords\nduring your calls to "),n("code",[e._v("~mechwolf.Protocol.add")]),e._v(' must be\nattributes. Furthermore, if they are quantities such as "10\nmL/min", these attributes should be parsed Quantity objects.')])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Give it a base state method.")]),n("br"),e._v('\nMechWolf requires that any component being modified as part of a\nprotocol have a base state which it will return to after the\nprotocol. For things that turn on, this base state is usually\n"off". The base state method must be called '),n("code",[e._v("base_state")]),e._v(" and\nreturn a dict with attribute as keys and settings for those\nattributes as values. For a Varian pump, it could look like\nthis:")]),e._v(" "),n("pre",[n("code",[e._v('>>> VarianPump(name="pump").base_state()\n{"rate": "0 mL/min"}\n')])]),e._v(" "),n("p",[e._v("The values in the base state dictionary need to be parsable into\nvalid values, the same as if they were passed as keyword\narguments to "),n("code",[e._v("~mechwolf.Protocol.add")]),e._v(". In fact, under the hood,\nthat is exactly what is happening. At the end of your protocol,\n"),n("code",[e._v("~mechwolf.Protocol.compile")]),e._v(" adds a procedure for each\n"),n("code",[e._v("~mechwolf.components.component.ActiveComponent")]),e._v(" in the protocol\nto return to its base state.å")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Give it an update method.")]),n("br"),e._v("\nThe job of the update method is to make the object's real-world\nstate match its virtual representation. This is where the\nhardware interfacing happens.")]),e._v(" "),n("p",[e._v("Note, however, that because MechWolf objects have two distinct\nuses (being manipulated before runtime and actually used during\nruntime to control the hardware), components must be able to be\ninstantiated without respect to it's real-world configuration.\nFor example, this means that, to enforce a level of abstraction,\nyou shouldn't need to know what serial port your client is\ntalking to your component in order to manipulate it when\ncreating your script. The object that is being run on your\nclient "),n("em",[e._v("would")]),e._v(" need to know that though, so the object has to be\nable to support both uses.")]),e._v(" "),n("p",[e._v("Note: this step doesn't apply to\n"),n("code",[e._v("~mechwolf.components.sensor.Sensor")]),e._v(" s, which already have a\nbuilt-in update method.")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("For sensors, give it a read method.")])]),e._v(" "),n("blockquote",[n("p",[e._v("This is where the actual data collection goes. It should return\nthe data read in from the sensor. MechWolf will automatically\ntimestamp it, so don't worry about that.")])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Test thoroughly with")]),e._v(" "),n("code",[e._v("~mechwolf.validate_component")]),e._v("."),n("br"),e._v("\nFor your convenience, the "),n("code",[e._v("~mechwolf.validate_component")]),e._v("\nfunction will take an instance of your class (not the class\nitself) and verify that it meets the requirements to be used in\na protocol.")])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Contribute to GitHub")]),e._v(" "),n("em",[e._v("(optional)")]),n("br"),e._v("\nOdds are you're not the only person in the world who could use\nthe component you're making. In the spirit of collaboration, we\nwelcome any and all components submitted to us that are\ncompatible with our API and encourage you to submit your\ncomponent in a pull request.")])])]),e._v(" "),n("h2",{attrs:{id:"example-making-the-philosopher-s-stone"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-making-the-philosopher-s-stone","aria-hidden":"true"}},[e._v("#")]),e._v(" Example: Making the Philosopher's Stone")]),e._v(" "),n("p",[e._v("Let's say that you discovered the "),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Philosopher%27s_stone",target:"_blank",rel:"noopener noreferrer"}},[e._v("philosopher's\nstone"),n("OutboundLink")],1),e._v(", which is\ncapable of turning anything into gold. But that's not good enough. You\nwant an automated philosopher's stone with MechWolf!")]),e._v(" "),n("p",[e._v("To make it work with MechWolf, we'll follow the process of creating a\nnew component by making a blank class that inherits from\n"),n("code",[e._v("~mechwolf.components.component.ActiveComponent")]),e._v(":")]),e._v(" "),n("pre",[n("code",[e._v("from mechwolf import ActiveComponent\n\nclass PhilosophersStone(ActiveComponent):\n    def __init__(self, name=None):\n        super().__init__(name=name)\n")])]),e._v(" "),n("p",[e._v("For attributes, let's imagine that the philosopher's stone can convert a\nvariable mass of the solution flowing through it into gold:")]),e._v(" "),n("pre",[n("code",[e._v('from mechwolf import ActiveComponent, ureg\n\nclass PhilosophersStone(ActiveComponent):\n    def __init__(self, name=None):\n        super().__init__(name=name)\n        self.rate = ureg.parse_expression("0 g/min")\n')])]),e._v(" "),n("p",[e._v("Now we'll need a base state:")]),e._v(" "),n("pre",[n("code",[e._v('from mechwolf import ActiveComponent, ureg\n\nclass PhilosophersStone(ActiveComponent):\n    def __init__(self, name=None):\n        super().__init__(name=name)\n        self.rate = ureg.parse_expression("0 g/min")\n\n    def base_state(self):\n        return dict(rate="0 g/min")\n')])]),e._v(" "),n("p",[e._v("And finally, a way to update it. Here, we'll have to rely on our\nimagination:")]),e._v(" "),n("pre",[n("code",[e._v('from mechwolf import ActiveComponent, ureg\n\nclass PhilosophersStone(ActiveComponent):\n    def __init__(self, name=None, serial_port=None):\n        super().__init__(name=name)\n        self.rate = ureg.parse_expression("0 g/min")\n        self.serial_port = serial_port\n\n    def base_state(self):\n        return dict(rate="0 g/min")\n\n    async def update(self):\n        # magic goes here\n        yield\n')])]),e._v(" "),n("p",[e._v("Saving it as "),n("code",[e._v("philosophersstone.py")]),e._v(", we can then use\n"),n("code",[e._v("~mechwolf.validate_component")]),e._v(" to test if instances of the class are\nvalid:")]),e._v(" "),n("pre",[n("code",[e._v('>>> import mechwolf as mw\n>>> from philosophersstone import PhilosophersStone\n>>> stone = PhilosophersStone(name="stone")\n>>> mw.validate_component(stone)\nTrue\n')])]),e._v(" "),n("p",[n("code",[e._v("~mechwolf.validate_component")]),e._v(" returned "),n("code",[e._v("True")]),e._v(", meaning that the\nphilosopher's stone class is facially valid.")]),e._v(" "),n("h2",{attrs:{id:"example-the-vici-valve"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#example-the-vici-valve","aria-hidden":"true"}},[e._v("#")]),e._v(" Example: The Vici Valve")]),e._v(" "),n("p",[e._v("The last example, though illustrative, isn't actually a working\ncomponent, since (unfortunately) philosophers' stones don't exist.\nLuckily, we have the next best thing: a Vici valve. To show how to\ncreate working components, we'll walk through MechWolf's implementation\nof "),n("code",[e._v("~mechwolf.components.vici.ViciValve")]),e._v(".")]),e._v(" "),n("p",[e._v("First, we need to include the import statements at the top. We\ncommunicate with Vici valves via serial on the client, but don't\nactually "),n("em",[e._v("need")]),e._v(" the serial package in order to instantiate a\n"),n("code",[e._v("~mechwolf.components.vici.ViciValve")]),e._v(" object. That's because you need to\nbe able to instantiate "),n("code",[e._v("~mechwolf.components.vici.ViciValve")]),e._v(" objects on\ndevices without the client extras installed (which includes the serial\npackage), such as when designing apparatuses on your personal computer.\nFor that reason, we wrap "),n("code",[e._v("import serial")]),e._v(" in a try-except clause:")]),e._v(" "),n("div",{staticClass:"literalinclude",attrs:{"data-lines":"3-6"}},[n("p",[e._v("../../../mechwolf/components/vici.py")])]),e._v(" "),n("p",[e._v("Because Vici valves are subclasses of\n"),n("code",[e._v("~mechwolf.components.valve.Valve")]),e._v(", we also need to import\n"),n("code",[e._v("~mechwolf.components.valve.Valve")]),e._v(". Since "),n("code",[e._v("vici.py")]),e._v(" is in the components\ndirectory, we do a local import:")]),e._v(" "),n("div",{staticClass:"literalinclude",attrs:{"data-lines":"8"}},[n("p",[e._v("../../../mechwolf/components/vici.py")])]),e._v(" "),n("p",[e._v("If we were creating the object in a different directory, we would import\n"),n("code",[e._v("~mechwolf.components.valve.Valve")]),e._v(" the usual way:")]),e._v(" "),n("pre",[n("code",[e._v("from mechwolf import Valve\n")])]),e._v(" "),n("p",[e._v("Now that we've got the modules we'll need, let's create the class:")]),e._v(" "),n("div",{staticClass:"literalinclude",attrs:{"data-lines":"10-11"}},[n("p",[e._v("../../../mechwolf/components/vici.py")])]),e._v(" "),n("p",[e._v("And we'll create an "),n("code",[e._v("__init__()")]),e._v(" method:")]),e._v(" "),n("div",{staticClass:"literalinclude",attrs:{"data-pyobject":"ViciValve.__init__"}},[n("p",[e._v("../../../mechwolf/components/vici.py")])]),e._v(" "),n("p",[e._v("Note that the arguments include the ones required by\n"),n("code",[e._v("~mechwolf.components.valve.Valve")]),e._v(" ("),n("code",[e._v("name")]),e._v(" and "),n("code",[e._v("mapping")]),e._v(") and\n"),n("code",[e._v("serial_port")]),e._v(", which is needed to connect to the physical component on\nthe client.")]),e._v(" "),n("p",[e._v("We can skip adding a base state because\n"),n("code",[e._v("~mechwolf.components.valve.Valve")]),e._v(" already has one, meaning that\n"),n("code",[e._v("~mechwolf.components.vici.ViciValve")]),e._v(" will inherit it automatically.")]),e._v(" "),n("p",[e._v("Now for the important parts: we need to make the object be able to make\nits real-world state match the object's state. We do that with the\n"),n("code",[e._v("update")]),e._v(" method. It needs to be an "),n("code",[e._v("async")]),e._v(" function that yields data to\nbe reported back to the hub. This is the driver, the heart of the\ncomponent that allows for execution:")]),e._v(" "),n("div",{staticClass:"literalinclude",attrs:{"data-pyobject":"ViciValve.update"}},[n("p",[e._v("../../../mechwolf/components/vici.py")])]),e._v(" "),n("p",[e._v("The exact implementation will vary from component to component, but the\nbasic idea is that it sends the message in a format that the component\ncan understand.")]),e._v(" "),n("p",[e._v("One thing to know about serial connections is that they need to be\nopened and closed. However, you don't want to open and close the\nconnection after every procedure, especially if you'll be doing a lot of\nprocedures in a short duration. Instead, you want to open the connection\nonce at the beginning and close it at the end when you're done with the\ncomponent. MechWolf can handle that automatically if you give it some\nadditional information, namely functions called "),n("code",[e._v("__enter__")]),e._v(" and\n"),n("code",[e._v("__exit__")]),e._v(".")]),e._v(" "),n("p",[e._v("In Vici valves, "),n("code",[e._v("__enter__")]),e._v(" creates a serial connection once when you\nstart the client and then returns "),n("code",[e._v("self")]),e._v(":")]),e._v(" "),n("div",{staticClass:"literalinclude",attrs:{"data-pyobject":"ViciValve.__enter__"}},[n("p",[e._v("../../../mechwolf/components/vici.py")])]),e._v(" "),n("p",[e._v("Similarly, "),n("code",[e._v("__exit__")]),e._v(" closes the connection:")]),e._v(" "),n("div",{staticClass:"literalinclude",attrs:{"data-pyobject":"ViciValve.__exit__"}},[n("p",[e._v("../../../mechwolf/components/vici.py")])]),e._v(" "),n("p",[n("code",[e._v("343")]),e._v(" and this "),n("a",{attrs:{href:"https://stackoverflow.com/questions/1984325/explaining-pythons-enter-and-exit",target:"_blank",rel:"noopener noreferrer"}},[e._v("StackOverflow\nanswer"),n("OutboundLink")],1),e._v("\nhave more about information about how to use "),n("code",[e._v("__enter__")]),e._v(" and "),n("code",[e._v("__exit__")]),e._v("\nmethods.")]),e._v(" "),n("p",[e._v("That's it! We now have a functioning Vici valve. Let's test it with\n"),n("code",[e._v("~mechwolf.validate_component")]),e._v(":")]),e._v(" "),n("pre",[n("code",[e._v('>>> import mechwolf as mw\n>>> mw.validate_component(mw.ViciValve(name="test", mapping={}))\nTrue\n')])]),e._v(" "),n("p",[e._v("Sure enough, it works. This isn't just an example however, it's exactly\nhow the Vici valve in the "),n("code",[e._v("~mechwolf.components.vici")]),e._v(" module works!")]),e._v(" "),n("p",[e._v("If you're stuck trying to make a new component, don't hesitate to reach\nout for "),n("code",[e._v("help <support>")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"a-note-on-naming"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#a-note-on-naming","aria-hidden":"true"}},[e._v("#")]),e._v(" A Note on Naming")]),e._v(" "),n("p",[e._v("Be sure to follow MechWolf's naming convention, especially if you plan\non contributing to the GitHub. Classes are named in CamelCase format in\nkeeping with "),n("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0008/#class-names",target:"_blank",rel:"noopener noreferrer"}},[e._v("PEP 08's class name\nspecification"),n("OutboundLink")],1),e._v(".")])])},[],!1,null,null,null);t.default=a.exports}}]);