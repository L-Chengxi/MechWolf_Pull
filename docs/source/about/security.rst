Security
========

IoT security has historically been lacking. With MechWolf, however, security has
been a foremost concern, not an afterthought. When dealing with potentially
dangerous chemicals and expensive lab hardware, getting hacked simply is not an
option. This section will document all of MechWolf's extensive security
features. Make sure to read and understand it and, if you have any questions,
please do not hesitate to contact us. Better safe than sorry.

General Approach
----------------

The general approach MechWolf takes to security is to rely on open-source
technologies that we have personally reviewed at the source-code level. We built
MechWolf to be `secure by design
<https://en.wikipedia.org/wiki/Secure_by_design>`_, meaning that we can publish
all our code and still maintain security. By relying on open-source software, we
can ensure that MechWolf and its dependencies are most likely to be secure, as
security experts review the code as well.

What We Can See
---------------

We are able to see your ``hub_id``, ``hub_address``, and ``hub_public_key``. We
could also see basic information that is sent with any web request such as IP
address but currently do not log this data in the interest of fiscal prudence.

What We Can't See
-----------------

Except for what is listed above, **we cannot see any of your data** because it
is sent directly from your client to your hub without ever passing through our
servers. Similarly, we cannot see your apparatuses or protocols. This is by
design in the interest of efficiency and security. Data we don't have can't be
stolen or manipulated.

Fault Tolerance
---------------

MechWolf clients cache the location of their hubs to prevent redundant requests
to the resolver. Thus, were the resolver to be taken down or even hijacked,
clients whose hubs have not changed addresses would see no change in service.
Furthermore, because clients check the validity of hub addresses via
cryptographic signatures, a takeover of the resolver could, at worst, disable
clients from connecting to their hubs due to their inability to verify hub
addresses given to them by a hijacker. It would not, however, allow malicious
actors to remotely redirect clients to contact alternative hubs. MechWolf
supports direct specification of hub addresses in the ``client_config.yaml``
file that is generated by ``mechwolf-setup``, so were the resolver be unusable,
apparatuses would still be functional with some additional user configuration.

Additional Security Measures
----------------------------

Beyond the fault tolerance inherent in our architecture choice, there are
various failsafes that ensure arbitrary protocols are not able to be executed.
Namely, clients use their security keys to verify that all protocols they
receive have been cryptographically signed. This signature encompasses both
authorship and time, preventing signed protocols from being used more than once.
We use `itsdangerous <http://pythonhosted.org/itsdangerous/>`_ to handle
protocol and data signing between clients and hosts. Specifically, itsdangerous
uses the incredibly strong SHA-512 algorithm implemented in `hashlib
<https://docs.python.org/3/library/hashlib.html>`_, which is itself part of the
Python Standard Library.

At the resolver level, we verify all ``hub_address`` updates by verifying that
the new ``hub_id`` is signed by the same key that signed the previous
``hub_id``. This is done via the `RSA algorithm
<https://github.com/sybrenstuvel/python-rsa/>`_, the gold standard of public key
cryptography. The purpose of this checking is to ensure that denial of service
attacks are not possible by repeatedly changing ``hub_address`` values to
invalid addresses that have not been signed but would nonetheless prevent a
client from connecting to its host.

Security Key Generation
-----------------------

.. Warning::

    It is critical to safeguard your security key and RSA private key. All of
    MechWolf's security depends on the secrecy of these keys.

Security keys are generated in the form of six words chosen at random by a
cryptographically secure pseudorandom number generator from `this list
<https://github.com/redacted/XKCD-password-generator/blob/master/xkcdpass/static/eff-long>`_
separated by a dash. There are 7,777 words in the list, meaning that there are
7777^6 permutations of keys. In terms of entropy, that is 77.5 bits, roughy
comparable to a 13 digit random case-sensitive alphanumeric password. As a real
example, compare the security key
``unseated-monetize-faucet-gravy-gopher-scheming`` to ``tGgg4IlSHZ7QL`` which
both have almost the same degree of entropy.

Failure Mechanisms
------------------

.. warning::

    If you are using a Raspberry Pi and activate SSH, you must change the
    username and password from the default values of ``raspberry`` and ``pi``,
    respectively.

By far the easiest way in which MechWolf's security can fail is if the security
key is stolen, and, to a lesser extent, if the hub's RSA private key is stolen.
In addition, we feel obliged to warn you that, if you use a Raspberry Pi to run
the client or hub, you must change the username and password if you activate
SSH. Failure to do so can result in remote access and use of your components as
well as the possible loss or modification of your data.

Injection Attack Mitigation
---------------------------

The MechWolf resolver is based of `AWS DynamoDB
<https://aws.amazon.com/dynamodb/>`_, a NoSQL database platform. By not using
SQL, we therefore significantly reduce the chances of an injection attack.
Furthermore, we properly escape all user input.

Connection Encryption
---------------------

All connections to `mechwolf.io <https://www.mechwolf.io>`_ are encrypted by
default with bank-grade encryption. Similarly, all connections between hubs and
clients are encrypted as well. This prevents man-in-the-middle attacks in
addition to eavesdropping.
